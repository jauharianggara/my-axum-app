openapi: 3.0.3
info:
  title: Karyawan & Kantor Management API
  description: |
    REST API untuk manajemen data karyawan dan kantor dengan JWT authentication.
    
    ## Features
    - âœ… JWT Authentication (Register, Login, Protected Endpoints)
    - âœ… CRUD Operations untuk Karyawan, Kantor, dan Jabatan
    - âœ… **Auto-Create User Account** - Otomatis membuat user saat create karyawan
    - âœ… Photo Upload Management dengan validasi keamanan
    - âœ… User Tracking (created_by, updated_by)
    - âœ… **Jabatan (Job Position) Management** - Mandatory field untuk karyawan
    - âœ… Database Integration dengan MySQL
    - âœ… Comprehensive Validation dan Error Handling
    
    ## Auto-Create User Feature
    Ketika membuat karyawan baru, sistem otomatis:
    - Generate username dari nama karyawan (lowercase, tanpa spasi)
    - Generate email: {username}@karyawan.local
    - Set default password: "12345678"
    - Karyawan bisa login menggunakan credentials ini
    - Jika username sudah ada, user yang existing akan di-reuse
    
    ## Authentication
    Sebagian besar endpoint memerlukan JWT token. Untuk mendapatkan token:
    1. Register user baru atau gunakan existing user
    2. Login untuk mendapatkan JWT token
    3. Gunakan token di header `Authorization: Bearer <token>`
    
    ## Quick Start
    1. **Register**: `POST /api/auth/register`
    2. **Login**: `POST /api/auth/login` 
    3. **Access Protected Endpoints**: Include `Authorization: Bearer <token>` header
    
  version: 5.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.example.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication dan JWT management
  - name: Health
    description: Health check endpoints
  - name: Karyawan
    description: Karyawan management operations (Protected)
  - name: Kantor
    description: Kantor management operations (Protected)
  - name: Jabatan
    description: Jabatan (Job Position) management operations (Protected)
  - name: Files
    description: Static file serving

paths:
  # Health & Root Endpoints
  /:
    get:
      tags:
        - Health
      summary: Root endpoint
      description: Simple hello world endpoint
      responses:
        '200':
          description: Success response
          content:
            text/plain:
              schema:
                type: string
                example: "Hello, World!"

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API server is running
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: string
                example: "ðŸš€ Karyawan Management API - Server is running!"

  # Authentication Endpoints
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Karyawan Endpoints
  /api/karyawans:
    get:
      tags:
        - Karyawan
      summary: Get all karyawan
      description: Retrieve list of all karyawan
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Karyawan list retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Karyawan'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Karyawan
      summary: Create new karyawan
      description: |
        Create a new karyawan record with automatic user account creation.
        
        **Auto-Create User Feature:**
        - System automatically creates a user account for the karyawan
        - Username: generated from nama (lowercase, spaces removed)
          - Example: "Budi Santoso" â†’ username: "budisantoso"
        - Email: {username}@karyawan.local
        - Default Password: "12345678"
        - If username already exists, the existing user will be reused
        
        **Note:** Multiple karyawan can share the same user account if they have the same name.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKaryawanRequest'
      responses:
        '201':
          description: Karyawan created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Karyawan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/karyawans/with-kantor:
    get:
      tags:
        - Karyawan
      summary: Get all karyawan with kantor info
      description: Retrieve list of all karyawan including kantor information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Karyawan with kantor info retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/KaryawanWithKantor'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/karyawans/with-photo:
    post:
      tags:
        - Karyawan
      summary: Create karyawan with photo
      description: |
        Create a new karyawan record with photo upload and automatic user account creation.
        
        **Auto-Create User Feature:**
        - System automatically creates a user account for the karyawan
        - Username: generated from nama (lowercase, spaces removed)
          - Example: "Budi Santoso" â†’ username: "budisantoso"
        - Email: {username}@karyawan.local
        - Default Password: "12345678"
        - If username already exists, the existing user will be reused
        
        **Photo Upload:**
        - Accepted formats: JPEG, PNG, GIF
        - Maximum size: 5MB
        - Files stored in: uploads/karyawan/{karyawan_id}/
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateKaryawanWithPhotoRequest'
      responses:
        '201':
          description: Karyawan created with photo successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Karyawan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/karyawans/{id}:
    get:
      tags:
        - Karyawan
      summary: Get karyawan by ID
      description: Retrieve a specific karyawan by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Karyawan ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Karyawan retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Karyawan'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Karyawan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Karyawan
      summary: Update karyawan
      description: Update an existing karyawan record
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Karyawan ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKaryawanRequest'
      responses:
        '200':
          description: Karyawan updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Karyawan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Karyawan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Karyawan
      summary: Delete karyawan
      description: Delete a karyawan record
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Karyawan ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Karyawan deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Karyawan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/karyawans/{id}/with-kantor:
    get:
      tags:
        - Karyawan
      summary: Get karyawan by ID with kantor info
      description: Retrieve a specific karyawan by ID including kantor information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Karyawan ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Karyawan with kantor info retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KaryawanWithKantor'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Karyawan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/karyawans/{id}/photo:
    post:
      tags:
        - Karyawan
      summary: Upload karyawan photo
      description: Upload or update photo for an existing karyawan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Karyawan ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PhotoUploadRequest'
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Karyawan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Karyawan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Karyawan
      summary: Delete karyawan photo
      description: Delete photo of an existing karyawan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Karyawan ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Photo deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Karyawan'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Karyawan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Kantor Endpoints
  /api/kantors:
    get:
      tags:
        - Kantor
      summary: Get all kantor
      description: Retrieve list of all kantor
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Kantor list retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Kantor'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Kantor
      summary: Create new kantor
      description: Create a new kantor record
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKantorRequest'
      responses:
        '201':
          description: Kantor created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Kantor'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/kantors/{id}:
    get:
      tags:
        - Kantor
      summary: Get kantor by ID
      description: Retrieve a specific kantor by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Kantor ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Kantor retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Kantor'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Kantor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Kantor
      summary: Update kantor
      description: Update an existing kantor record
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Kantor ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKantorRequest'
      responses:
        '200':
          description: Kantor updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Kantor'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Kantor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Kantor
      summary: Delete kantor
      description: Delete a kantor record
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Kantor ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Kantor deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Kantor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Jabatan Endpoints
  /api/jabatans:
    get:
      tags:
        - Jabatan
      summary: Get all jabatan
      description: Retrieve list of all jabatan (job positions)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of jabatan retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Jabatan'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Jabatan
      summary: Create new jabatan
      description: Create a new jabatan (job position) record
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJabatanRequest'
      responses:
        '200':
          description: Jabatan created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Jabatan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/jabatans/{id}:
    get:
      tags:
        - Jabatan
      summary: Get jabatan by ID
      description: Retrieve a specific jabatan by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Jabatan ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Jabatan retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Jabatan'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Jabatan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Jabatan
      summary: Update jabatan
      description: Update an existing jabatan record
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Jabatan ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJabatanRequest'
      responses:
        '200':
          description: Jabatan updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Jabatan'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Jabatan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Jabatan
      summary: Delete jabatan
      description: |
        Delete a jabatan record
        
        **Note:** Cannot delete jabatan if it's being used by any karyawan (foreign key constraint)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Jabatan ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Jabatan deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
        '400':
          description: Invalid ID format or jabatan is in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Failed to delete jabatan"
                data: null
                errors: ["Database error: foreign key constraint fails"]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Jabatan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # File Serving
  /uploads/karyawan/photos/{filename}:
    get:
      tags:
        - Files
      summary: Get karyawan photo
      description: Retrieve karyawan photo file
      parameters:
        - name: filename
          in: path
          required: true
          description: Photo filename
          schema:
            type: string
            example: "1_photo_1698567890.jpg"
      responses:
        '200':
          description: Photo file
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/gif:
              schema:
                type: string
                format: binary
        '404':
          description: Photo not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    # Common Schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        errors:
          type: array
          items:
            type: string
          nullable: true
          example: null
      required:
        - success
        - message

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Operation failed"
        data:
          nullable: true
          example: null
        errors:
          type: array
          items:
            type: string
          example: ["Error message 1", "Error message 2"]
      required:
        - success
        - message
        - errors

    # Authentication Schemas
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "john_doe"
          description: Unique username (3-50 characters)
        email:
          type: string
          format: email
          maxLength: 100
          example: "john@example.com"
          description: Valid email address (max 100 characters)
        password:
          type: string
          minLength: 6
          example: "securepassword123"
          description: Password (minimum 6 characters)
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
          description: Full name (2-100 characters)
      required:
        - username
        - email
        - password
        - full_name

    LoginRequest:
      type: object
      properties:
        username_or_email:
          type: string
          example: "john_doe"
          description: Username or email address
        password:
          type: string
          example: "securepassword123"
          description: User password
      required:
        - username_or_email
        - password

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          example: "john@example.com"
        full_name:
          type: string
          example: "John Doe"
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-10-29T10:30:00Z"
      required:
        - id
        - username
        - email
        - full_name
        - is_active
        - created_at

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserResponse'
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: JWT token for authentication
        expires_in:
          type: integer
          example: 86400
          description: Token expiry time in seconds (24 hours)
      required:
        - user
        - token
        - expires_in

    # Karyawan Schemas
    Karyawan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nama:
          type: string
          example: "Budi Santoso"
        gaji:
          type: integer
          example: 8000000
          description: Salary in IDR
        kantor_id:
          type: integer
          example: 2
          description: Office ID (required)
        jabatan_id:
          type: integer
          example: 1
          description: Job position ID (required)
        foto_path:
          type: string
          nullable: true
          example: "uploads/karyawan/photos/1_photo_1699234567.jpg"
        foto_original_name:
          type: string
          nullable: true
          example: "profile.jpg"
        foto_size:
          type: integer
          nullable: true
          example: 245760
          description: File size in bytes
        foto_mime_type:
          type: string
          nullable: true
          example: "image/jpeg"
        created_by:
          type: integer
          nullable: true
          example: 1
          description: User ID who created this record
        updated_by:
          type: integer
          nullable: true
          example: 1
          description: User ID who last updated this record
        created_at:
          type: string
          format: date-time
          example: "2025-10-29T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-29T10:30:00Z"
      required:
        - id
        - nama
        - gaji
        - kantor_id
        - jabatan_id
        - created_at
        - updated_at

    KaryawanWithKantor:
      allOf:
        - $ref: '#/components/schemas/Karyawan'
        - type: object
          properties:
            kantor_nama:
              type: string
              nullable: true
              example: "Kantor Jakarta"
              description: Office name
            jabatan_nama:
              type: string
              nullable: true
              example: "Manager"
              description: Job position name

    CreateKaryawanRequest:
      type: object
      properties:
        nama:
          type: string
          minLength: 2
          maxLength: 50
          example: "Budi Santoso"
          description: Employee name (2-50 characters)
        gaji:
          type: string
          example: "8000000"
          description: Salary as string (1,000,000 - 100,000,000 IDR)
        kantor_id:
          type: string
          example: "2"
          description: Office ID as string (must exist in database)
        jabatan_id:
          type: string
          example: "1"
          description: Jabatan ID as string (must exist in database)
      required:
        - nama
        - gaji
        - kantor_id
        - jabatan_id

    UpdateKaryawanRequest:
      type: object
      properties:
        nama:
          type: string
          minLength: 2
          maxLength: 50
          example: "Budi Santoso"
          description: Employee name (2-50 characters)
        gaji:
          type: string
          example: "9000000"
          description: Salary as string (1,000,000 - 100,000,000 IDR)
        kantor_id:
          type: string
          example: "2"
          description: Office ID as string (must exist in database)
        jabatan_id:
          type: string
          example: "1"
          description: Jabatan ID as string (must exist in database)
      required:
        - nama
        - gaji
        - kantor_id
        - jabatan_id

    CreateKaryawanWithPhotoRequest:
      type: object
      properties:
        nama:
          type: string
          minLength: 2
          maxLength: 50
          example: "Budi Santoso"
          description: Employee name (2-50 characters)
        posisi:
          type: string
          minLength: 2
          maxLength: 30
          example: "Software Engineer"
          description: Job position (2-30 characters)
        gaji:
          type: string
          example: "8000000"
          description: Salary as string (1,000,000 - 100,000,000 IDR)
        kantor_id:
          type: string
          example: "2"
          description: Office ID as string (must exist in database)
        foto:
          type: string
          format: binary
          description: Photo file (JPEG/PNG/GIF, max 5MB)
      required:
        - nama
        - posisi
        - gaji
        - kantor_id
        - foto

    PhotoUploadRequest:
      type: object
      properties:
        foto:
          type: string
          format: binary
          description: Photo file (JPEG/PNG/GIF, max 5MB)
      required:
        - foto

    # Kantor Schemas
    Kantor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nama:
          type: string
          example: "Kantor Pusat"
        alamat:
          type: string
          example: "Jl. Merdeka No.1, Jakarta"
        longitude:
          type: string
          example: "106.8271530"
          description: Longitude coordinate (-180 to 180)
        latitude:
          type: string
          example: "-6.1751100"
          description: Latitude coordinate (-90 to 90)
        created_at:
          type: string
          format: date-time
          example: "2025-10-29T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-10-29T10:30:00Z"
      required:
        - id
        - nama
        - alamat
        - longitude
        - latitude
        - created_at
        - updated_at

    CreateKantorRequest:
      type: object
      properties:
        nama:
          type: string
          minLength: 2
          maxLength: 100
          example: "Kantor Cabang"
          description: Office name (2-100 characters)
        alamat:
          type: string
          minLength: 5
          maxLength: 200
          example: "Jl. Sudirman No.10, Jakarta"
          description: Office address (5-200 characters)
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 106.827153
          description: Longitude coordinate (-180 to 180)
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: -6.175110
          description: Latitude coordinate (-90 to 90)
      required:
        - nama
        - alamat
        - longitude
        - latitude

    UpdateKantorRequest:
      type: object
      properties:
        nama:
          type: string
          minLength: 2
          maxLength: 100
          example: "Kantor Cabang Updated"
          description: Office name (2-100 characters)
        alamat:
          type: string
          minLength: 5
          maxLength: 200
          example: "Jl. Sudirman No.15, Jakarta"
          description: Office address (5-200 characters)
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 106.827153
          description: Longitude coordinate (-180 to 180)
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: -6.175110
          description: Latitude coordinate (-90 to 90)
      required:
        - nama
        - alamat
        - longitude
        - latitude

    # Jabatan Schemas
    Jabatan:
      type: object
      properties:
        id:
          type: integer
          example: 1
        nama_jabatan:
          type: string
          example: "Manager"
          description: Job position name
        deskripsi:
          type: string
          nullable: true
          example: "Manajer departemen"
          description: Job position description
        created_at:
          type: string
          format: date-time
          example: "2025-11-01T02:59:51Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-11-01T02:59:51Z"
      required:
        - id
        - nama_jabatan
        - created_at
        - updated_at

    CreateJabatanRequest:
      type: object
      properties:
        nama_jabatan:
          type: string
          minLength: 2
          maxLength: 100
          example: "Manager"
          description: Job position name (2-100 characters)
        deskripsi:
          type: string
          maxLength: 500
          example: "Manajer departemen"
          description: Job position description (max 500 characters, optional)
      required:
        - nama_jabatan

    UpdateJabatanRequest:
      type: object
      properties:
        nama_jabatan:
          type: string
          minLength: 2
          maxLength: 100
          example: "Senior Manager"
          description: Job position name (2-100 characters)
        deskripsi:
          type: string
          maxLength: 500
          example: "Manajer senior departemen"
          description: Job position description (max 500 characters, optional)
      required:
        - nama_jabatan

security:
  - BearerAuth: []