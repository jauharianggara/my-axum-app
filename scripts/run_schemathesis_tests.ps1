# Schemathesis API Testing Script for Windows
# Comprehensive testing menggunakan Schemathesis dan Python

param(
    [string]$BaseUrl = "http://localhost:8080",
    [int]$MaxExamples = 50,
    [switch]$SkipInstall,
    [switch]$Verbose
)

$ErrorActionPreference = "Stop"

Write-Host "üß™ Karyawan & Kantor API - Schemathesis Testing Suite" -ForegroundColor Cyan
Write-Host "=" * 60 -ForegroundColor Gray

# Check if Python is available
function Test-PythonAvailable {
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Python found: $pythonVersion" -ForegroundColor Green
            return $true
        }
    } catch {
        Write-Host "‚ùå Python not found in PATH" -ForegroundColor Red
        return $false
    }
    return $false
}

# Install Python dependencies
function Install-Dependencies {
    Write-Host "üì¶ Installing Schemathesis dependencies..." -ForegroundColor Yellow
    
    try {
        # Create virtual environment if not exists
        if (!(Test-Path "venv")) {
            Write-Host "üîß Creating Python virtual environment..." -ForegroundColor Blue
            python -m venv venv
        }
        
        # Activate virtual environment
        Write-Host "üîå Activating virtual environment..." -ForegroundColor Blue
        if (Test-Path "venv\Scripts\activate.ps1") {
            & .\venv\Scripts\activate.ps1
        } else {
            & .\venv\Scripts\Activate.ps1
        }
        
        # Install requirements
        Write-Host "üì• Installing required packages..." -ForegroundColor Blue
        pip install --upgrade pip
        pip install schemathesis requests hypothesis pytest
        
        Write-Host "‚úÖ Dependencies installed successfully!" -ForegroundColor Green
        return $true
    } catch {
        Write-Host "‚ùå Failed to install dependencies: $_" -ForegroundColor Red
        return $false
    }
}

# Check if API is running
function Test-ApiAvailable {
    param([string]$Url)
    
    Write-Host "üîç Checking if API is running at $Url..." -ForegroundColor Blue
    
    for ($i = 1; $i -le 10; $i++) {
        try {
            $response = Invoke-WebRequest -Uri "$Url/health" -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ API is ready!" -ForegroundColor Green
                return $true
            }
        } catch {
            Write-Host "‚è≥ Attempt $i/10 - waiting..." -ForegroundColor Yellow
            Start-Sleep -Seconds 2
        }
    }
    
    Write-Host "‚ùå API not available at $Url" -ForegroundColor Red
    return $false
}

# Run Schemathesis tests
function Start-SchemathesisTests {
    param(
        [string]$BaseUrl,
        [int]$MaxExamples
    )
    
    Write-Host "üß™ Running Schemathesis tests..." -ForegroundColor Cyan
    
    try {
        # Set environment variables
        $env:API_BASE_URL = $BaseUrl
        $env:MAX_EXAMPLES = $MaxExamples
        
        # Run Python test script
        $result = python schemathesis_test.py
        $exitCode = $LASTEXITCODE
        
        if ($exitCode -eq 0) {
            Write-Host "‚úÖ Schemathesis tests completed successfully!" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå Schemathesis tests failed with exit code: $exitCode" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "‚ùå Error running Schemathesis tests: $_" -ForegroundColor Red
        return $false
    }
}

# Generate test report
function New-TestReport {
    $reportFile = "schemathesis_report.md"
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    $report = @"
# Schemathesis API Test Report

**Generated**: $timestamp
**Base URL**: $BaseUrl
**Max Examples**: $MaxExamples

## Test Configuration
- Python Version: $(python --version 2>&1)
- Schemathesis Version: $(pip show schemathesis | Select-String "Version" | ForEach-Object { $_.ToString().Split(":")[1].Trim() })
- Test Target: Karyawan & Kantor Management API

## Test Files Generated
- OpenAPI Schema: api_schema.json
- Test Results: Available in console output

## Notes
- Property-based testing with Hypothesis
- Custom hooks for valid test data generation
- Comprehensive endpoint coverage
- Validation error testing included

---
Report generated by Schemathesis Test Runner
"@

    try {
        $report | Out-File -FilePath $reportFile -Encoding UTF8
        Write-Host "üìÑ Test report saved to: $reportFile" -ForegroundColor Blue
    } catch {
        Write-Host "‚ö†Ô∏è  Could not save test report: $_" -ForegroundColor Yellow
    }
}

# Main execution
try {
    # Check Python availability
    if (!(Test-PythonAvailable)) {
        Write-Host "‚ùå Python is required for Schemathesis testing" -ForegroundColor Red
        Write-Host "Please install Python from https://python.org" -ForegroundColor Yellow
        exit 1
    }
    
    # Install dependencies if needed
    if (!$SkipInstall) {
        if (!(Install-Dependencies)) {
            Write-Host "‚ùå Failed to install dependencies" -ForegroundColor Red
            exit 1
        }
    }
    
    # Check if test script exists
    if (!(Test-Path "schemathesis_test.py")) {
        Write-Host "‚ùå schemathesis_test.py not found in current directory" -ForegroundColor Red
        exit 1
    }
    
    # Check API availability
    if (!(Test-ApiAvailable -Url $BaseUrl)) {
        Write-Host "‚ùå API not available - please start the application first" -ForegroundColor Red
        Write-Host "üí° Try: docker-compose up -d" -ForegroundColor Yellow
        exit 1
    }
    
    # Run tests
    Write-Host "" -ForegroundColor Gray
    $testSuccess = Start-SchemathesisTests -BaseUrl $BaseUrl -MaxExamples $MaxExamples
    
    # Generate report
    New-TestReport
    
    # Final result
    if ($testSuccess) {
        Write-Host "" -ForegroundColor Gray
        Write-Host "üéâ All Schemathesis tests completed successfully!" -ForegroundColor Green
        Write-Host "üìä Check the console output above for detailed results" -ForegroundColor Blue
        exit 0
    } else {
        Write-Host "" -ForegroundColor Gray
        Write-Host "‚ùå Some Schemathesis tests failed" -ForegroundColor Red
        Write-Host "üìä Check the console output above for detailed results" -ForegroundColor Yellow
        exit 1
    }
    
} catch {
    Write-Host "üí• Unexpected error: $_" -ForegroundColor Red
    exit 1
} finally {
    # Cleanup - deactivate virtual environment if active
    if ($env:VIRTUAL_ENV) {
        deactivate
    }
}